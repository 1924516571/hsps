(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "reflect-metadata", "axios", "lodash/isString", "lodash/isObject", "lodash/isFunction"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    require("reflect-metadata");
    var axios_1 = tslib_1.__importDefault(require("axios"));
    var isString_1 = tslib_1.__importDefault(require("lodash/isString"));
    var isObject_1 = tslib_1.__importDefault(require("lodash/isObject"));
    var isFunction_1 = tslib_1.__importDefault(require("lodash/isFunction"));
    var ApiInterface = /** @class */ (function () {
        function ApiInterface() {
        }
        return ApiInterface;
    }());
    exports.ApiInterface = ApiInterface;
    var httpConfig = /** @class */ (function () {
        function httpConfig() {
        }
        return httpConfig;
    }());
    exports.httpConfig = httpConfig;
    var ApiConfig = /** @class */ (function () {
        function ApiConfig() {
        }
        return ApiConfig;
    }());
    exports.ApiConfig = ApiConfig;
    var QueryHttpConfig = /** @class */ (function () {
        function QueryHttpConfig() {
        }
        return QueryHttpConfig;
    }());
    exports.QueryHttpConfig = QueryHttpConfig;
    var QueryHttpResponse = /** @class */ (function () {
        function QueryHttpResponse() {
        }
        return QueryHttpResponse;
    }());
    exports.QueryHttpResponse = QueryHttpResponse;
    var QueryHttp = /** @class */ (function () {
        function QueryHttp() {
        }
        return QueryHttp;
    }());
    exports.QueryHttp = QueryHttp;
    var QueryConfig = /** @class */ (function () {
        function QueryConfig() {
        }
        return QueryConfig;
    }());
    exports.QueryConfig = QueryConfig;
    var QueryArgs = /** @class */ (function () {
        function QueryArgs() {
        }
        return QueryArgs;
    }());
    exports.QueryArgs = QueryArgs;
    var QueryPostArgs = /** @class */ (function () {
        function QueryPostArgs() {
        }
        return QueryPostArgs;
    }());
    exports.QueryPostArgs = QueryPostArgs;
    var QueryPostParams = /** @class */ (function () {
        function QueryPostParams() {
        }
        return QueryPostParams;
    }());
    exports.QueryPostParams = QueryPostParams;
    var QueryGetArgs = /** @class */ (function () {
        function QueryGetArgs() {
        }
        return QueryGetArgs;
    }());
    exports.QueryGetArgs = QueryGetArgs;
    var QueryGetParams = /** @class */ (function () {
        function QueryGetParams() {
        }
        return QueryGetParams;
    }());
    exports.QueryGetParams = QueryGetParams;
    function pupa(tpl, data) {
        if (typeof tpl !== 'string') {
            throw new TypeError("Expected a string in the first argument, got " + typeof tpl);
        }
        if (typeof data !== 'object') {
            throw new TypeError("Expected an Object/Array in the second argument, got " + typeof data);
        }
        var re = /{(.*?)}/g;
        return tpl.replace(re, function (_, key) {
            var e_1, _a;
            var ret = data;
            try {
                for (var _b = tslib_1.__values(key.split('.')), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var prop = _c.value;
                    ret = ret ? ret[prop] : '';
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return ret || '';
        });
    }
    function Get(a, b) {
        return CreatePostGet('get', a, b);
    }
    exports.Get = Get;
    function Post(a, b) {
        return CreatePostGet('post', a, b);
    }
    exports.Post = Post;
    function CreatePostGet(typePrefix, a, b) {
        return function (target, propertyKey, descriptor) {
            var url = "", type = typePrefix, old, format;
            Reflect.defineMetadata(propertyKey, propertyKey, target);
            if (isObject_1.default(a) && !isFunction_1.default(a)) {
                url = a.url;
                if (a.format) {
                    format = a.format;
                }
                type = typePrefix + "_path";
            }
            else if (isString_1.default(a)) {
                url = a;
                type = typePrefix + "_path";
            }
            if (isFunction_1.default(a) && !b) {
                format = a;
            }
            else if (a && isFunction_1.default(b)) {
                format = b;
            }
            if (type === typePrefix) {
                old = descriptor.value;
            }
            var config = { type: type, url: url, old: old, format: format };
            Reflect.defineMetadata(propertyKey, config, target, 'method');
        };
    }
    var defaultConfig = {
        autoPrefix: true,
        prefix: "",
        host: "."
    };
    function preUrl(url, config) {
        var prefix = "";
        if (config && config.autoPrefix) {
            prefix = (config.host ? config.host : "") + (config.prefix ? config.prefix : "");
        }
        if (isString_1.default(url)) {
            return prefix + url;
        }
        else {
            throw Error("url not available");
        }
    }
    function preConfig(args) {
        if (args) {
            var config = Object.assign({}, args.config || {});
            config.params = Object.assign({}, args.params || {}, config.params || {});
            return config;
        }
        else {
            return { params: {} };
        }
    }
    function preDefer(defer, format) {
        if (isFunction_1.default(format)) {
            return new Promise(function (resolve, reject) {
                defer
                    .then(function (res) {
                    res.data = format(res.data);
                    resolve(res);
                })
                    .catch(function (e) {
                    reject(e);
                });
            });
        }
        else {
            return defer;
        }
    }
    function preFormat(a, b) {
        return b && isFunction_1.default(b.format)
            ? b.format
            : (a && isFunction_1.default(a.format)
                ? a.format
                : undefined);
    }
    function preData(a) {
        if (a && a.data) {
            return a.data;
        }
    }
    function configMerge(qconfig, q) {
        if (q.prefix) {
            qconfig.prefix = q.prefix;
        }
        if (q.host) {
            qconfig.host = q.host;
        }
        return qconfig;
    }
    function Query(config) {
        return function (target) {
            return function () {
                var e_2, _a;
                var q = new (target.bind.apply(target, tslib_1.__spread([void 0], arguments)))();
                var p = Reflect.getMetadataKeys(q);
                var qconfig = Object.assign({}, defaultConfig, config || {});
                var http;
                if (q["http"]) {
                    http = q['http'];
                }
                else if (config && config["http"]) {
                    http = config["http"];
                }
                else {
                    http = axios_1.default;
                }
                var _loop_1 = function (k) {
                    var config_1 = Reflect.getMetadata(k, q, 'method');
                    if (config_1.type.includes("get")) {
                        q[k] = function () {
                            var url;
                            var ajaxConfig = preConfig(arguments[0]);
                            if (config_1.type === 'get_path') {
                                url = config_1.url;
                            }
                            else if (config_1.type === 'get') {
                                if (config_1.old) {
                                    url = Reflect.apply(config_1.old, this, arguments);
                                }
                                else {
                                    return Promise.reject({
                                        message: k + " get function not found"
                                    });
                                }
                            }
                            else {
                                return Promise.reject({
                                    message: "type not found"
                                });
                            }
                            url = pupa(preUrl(url, configMerge(qconfig, q)), ajaxConfig.params ? ajaxConfig.params : {});
                            return preDefer(http.get(url, ajaxConfig), preFormat(config_1, arguments[0]));
                        };
                    }
                    else if (config_1.type.includes('post')) {
                        q[k] = function () {
                            var url;
                            var ajaxConfig = preConfig(arguments[0]);
                            if (config_1.type === 'post_path') {
                                url = config_1.url;
                            }
                            else if (config_1.type === 'post') {
                                if (config_1.old) {
                                    url = Reflect.apply(config_1.old, this, arguments);
                                }
                                else {
                                    return Promise.reject({
                                        message: k + " post function not found"
                                    });
                                }
                            }
                            else {
                                return Promise.reject({
                                    message: "type not found"
                                });
                            }
                            url = pupa(preUrl(url, configMerge(qconfig, q)), ajaxConfig.params ? ajaxConfig.params : {});
                            return preDefer(http.post(url, preData(arguments[0]), ajaxConfig), preFormat(config_1, arguments[0]));
                        };
                    }
                };
                try {
                    for (var p_1 = tslib_1.__values(p), p_1_1 = p_1.next(); !p_1_1.done; p_1_1 = p_1.next()) {
                        var k = p_1_1.value;
                        _loop_1(k);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (p_1_1 && !p_1_1.done && (_a = p_1.return)) _a.call(p_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return q;
            };
        };
    }
    exports.Query = Query;
    exports.default = Query;
});
//# sourceMappingURL=query.js.map