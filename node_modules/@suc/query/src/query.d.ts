import "reflect-metadata";

export interface ApiInterface {
    host: string;
    prefix: string;
}

export type Format = (args: any) => any;

function Get(): MethodDecorator;
function Get(format: Format): MethodDecorator;
function Get(url: string, format?: Format): MethodDecorator;
function Get(config: {
    url: string;
    format?: Format;
}, format?: Format): MethodDecorator;

function Post(): MethodDecorator;
function Post(format: Format): MethodDecorator;
function Post(url: string, format?: Format): MethodDecorator;
function Post(config: {
    url: string;
    format?: Format;
}, format?: Format): MethodDecorator;

export type HttpType = "get" | "get_path" | "post_path" | "post";

export interface httpConfig {
    type: HttpType;
    url: string;

    old?(): string;

    format?: Format;
}

export function Query(config?: QueryConfig): ClassDecorator;

export interface ApiConfig {
    prefix?: string;
    host?: string;
}

export interface QueryHttpConfig<T extends Object> {
    params?: T;
}

export interface QueryHttpResponse<T> {
    data: T;
}

export interface QueryHttp {
    get(url: string, config?: QueryHttpConfig<Object>): Promise<QueryHttpResponse<any>>;

    post(url: string, data: any, config?: QueryHttpConfig<Object>): Promise<QueryHttpResponse<any>>;
}

export interface QueryConfig extends ApiConfig {
    http?: QueryHttp;
    autoPrefix?: boolean;
}

export type QueryBody = any;

export interface QueryArgs {
    format?: Format;
    config?: QueryHttpConfig<Object>;
    params?: Object;
}

export interface QueryPostArgs<T extends QueryBody> extends QueryArgs {
    data?: T;
}

export interface QueryPostParams<T extends QueryBody, U extends Object> extends QueryPostArgs<T> {
    params?: U;
}

export interface QueryGetArgs<T extends Object> extends QueryArgs {
    params?: T;
    config?: QueryHttpConfig<T>;
}

export interface QueryGetParams extends QueryArgs {
}

export {Get, Post};
export default Query;
