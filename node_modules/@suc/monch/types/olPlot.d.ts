import Vue, { VNode } from 'vue';
import type Feature from "ol/feature";
import {VectorLayer} from "./vectorLayer";

export type PlotTypes =
    'MARKER'
    | 'ARC'
    | 'CURVE'
    | 'POLYLINE'
    | 'FREEHAND_LINE'
    | 'CIRCLE'
    | 'ELLIPSE'
    | 'LUNE'
    | 'SECTOR'
    | 'CLOSED_CURVE'
    | 'POLYGON'
    | 'RECTANGLE'
    | 'FREEHAND_POLYGON'
    | 'GATHERING_PLACE'
    | 'DOUBLE_ARROW'
    | 'STRAIGHT_ARROW'
    | 'FINE_ARROW'
    | 'ASSAULT_DIRECTION'
    | 'ATTACK_ARROW'
    | 'TAILED_ATTACK_ARROW'
    | 'SQUAD_COMBAT'
    | 'TAILED_SQUAD_COMBAT'

export interface PlotEvent {
    dataStore: {
        type: string,   //标绘类型
        points: Array<any>,   //标绘特有的坐标点数组
    },
    feature: Feature,
    coord: Array<any>,   //地理坐标
    center: Array<number>    //中心点坐标
}
export interface PlotCancelEvent {
    feature: Feature
}

export interface SelectedFeature {
    layPosition: number[],
    category: string,
    data: {
        strokeColor?: string,
        width?: number,
        lineStyle?: 'dashed'|'solid',
        fillColor?: string
    }
}

export declare class OlPlot extends VectorLayer {
    /**
     * 标绘类型
     * @default MARKER
     */
    type?: '' | PlotTypes;
    /**
     * 正绘制图形的样式
     */
    olStyle?: object;
    /**
     * 标绘图形是否不可编辑
     * @default false
     */
    noEdit?: boolean;
    /**
     * 每次绘制新图形前，是否清除图层中的其他图形
     * @default false
     */
    isSingle?: boolean;
    /**
     * 静态数据，实例监听到 hasFeatures 的变化会先清除图层中的所有图形，再绘制静态数据中的图形
     * @default []
     */
    hasFeatures?: Array<any>;
    /**
     * 图层层级
     * @default 0
     */
    zIndex?: number;
    /**
     * 输出图形坐标串时采用的坐标系
     * @default EPSG:4326
     */
    projection?: string;
    /**
     * 绘制结束或者右键取消绘制时触发
     */
    $emit(eventName: 'drawend', e: PlotEvent|PlotCancelEvent): this;
    /**
     * 移动图形或者移动图形节点时触发
     */
    $emit(eventName: 'editmove', e: PlotEvent): this;
    /**
     * 移动停止时触发
     */
    $emit(eventName: 'editend', e: PlotEvent): this;
    /**
     * 图形删除时触发
     */
    $emit(eventName: 'delete', e: {feature: Feature}): this;
    /**
     * 图形删除时触发
     */
    $emit(eventName: 'loadend', fs: Omit<PlotEvent, 'feature'>[]): this;

    /**
     * 作用域插槽
     */
    $scopedSlots: {
        'default': (props: { selectedFeature: SelectedFeature|null }) => VNode[]
    };
}
