import Vue from 'vue';
import { StyleLike } from './style';

export interface EditItem {
    coords:number[],
    fId:string
}
export type EditItems = [EditItem];

export declare class OlDrawPoints extends Vue {
    /**
     * 编辑框的颜色
     */
    modifyColor: string|Array<number>;
    /**
     * 图标热点区域半径，建议为图标最大宽度的一半
     * @default 20
     */
    pixelTolerance?: number;
    /**
     * 要绘制的点位样式
     * @default {
                        image: {
                            circle: {
                                radius: 6,
                                fill: {
                                    color: "#0099ff"
                                },
                                stroke: {
                                    color: "#fff",
                                    width: 1
                                }
                            }
                        }
                    }
     */
    icon?: StyleLike;
    /**
     * 触发点位绘制交互，并用作新增feature的id
     */
    newId?: string|number;
    /**
     * 可编辑点位的id，双向绑定；如果设置了 modifyId，则 isAddModify，isLoadModify 失效
     */
    modifyId?: Array<string|number>;
    /**
     * 是否绘制后就可编辑
     * @default true
     */
    isAddModify?: boolean;
    /**
     * 是否加载后就可编辑
     * @default true
     */
    isLoadModify?: boolean;
    /**
     * 要删除的点位的id集合
     */
    deleteId?: Array<string|number>;
    /**
     * 每次绘制前是否清除前面绘制的点位；默认不清除
     * @default false
     */
    isSingle?: boolean;
    /**
     * 图层层级
     * @default 0
     */
    zIndex?: number;
    /**
     * 输入输出数据采用的坐标系
     * @default EPSG:4326
     */
    projection?: string;

    /**
     * 加载后就可编辑或者绘制后可编辑时触发
     */
    $emit(eventName: 'update:modifyId', modifyIds: Array<string|number>):this;
    /**
     * 编辑开始时触发
     * @param 被编辑点位的数据
     */
    $emit(eventName: 'modifystart', e: EditItems):this;
    /**
     * 编辑结束时触发
     * @param 被编辑点位的数据
     */
    $emit(eventName: 'modifyend', e: EditItems):this;
    /**
     * 绘制结束时触发
     */
    $emit(eventName: 'drawend', e: EditItems):this;
}
