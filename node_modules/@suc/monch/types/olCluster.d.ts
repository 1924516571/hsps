import Vue, { VNode } from 'vue';
import {StyleLike} from './style';
import type VectorLayer from 'ol/layer/Vector';
import type Feature from 'ol/Feature'
import {VectorLayer as VectorLayerInterface} from "./vectorLayer";

export interface ClusterCoordsPoint {
    id:string,
    name?:string,
    coords:number[]
}
export interface ClusterLonLatPoint {
    id:string,
    name?:string,
    lon:number,
    lat:number
}

export type ClusterPointInterface = ClusterCoordsPoint|ClusterLonLatPoint;

export interface FitDataInterface {
    center: number[],  // 坐标，坐标系和组件的projection属性一致
    zoom: number   // 缩放层级
}

export interface ClusterEventInterface {
    coord: number[],   // 事件发生处的坐标
    olLayer: VectorLayer,
    feature: Feature
}

export declare class OlCluster extends VectorLayerInterface {
    /**
     * 点位集合
     * @default []
     */
    points: Array<ClusterPointInterface>;
    /**
     * 聚集点样式
     */
    clusterStyle?: StyleLike;
    /**
     * 单点样式
     */
    pointStyle?: StyleLike;
    /**
     * 设置为true，则组件内不再为聚集样式加上 size text，完全采用外部定义的样式
     * @default false
     */
    fullCustomStyle?: boolean;
    /**
     * Minimum distance in pixels between clusters.
     * @default 20
     */
    distance?: number;
    /**
     * 设置为‘none’，可屏蔽默认聚集弹框
     */
    clusterListLabel?: string;
    /**
     * 设置为‘none’，可屏蔽默认名称弹框
     */
    overLabel?: string;
    /**
     * 点击空白处是否设置selectPoint=null，进而关闭相关 overlay
     * @default true
     */
    blankClear?: boolean;
    /**
     * 选中点位的id 双向绑定
     */
    selectPointId?: string|number;
    /**
     * 图层是否在初始化时自适应屏幕
     * @default false
     */
    isFit?: boolean;
    /**
     * 图层id 可通过 layer.get('id') 获取
     */
    layerId?: string;
    /**
     * 图层层级
     * @default 0
     */
    zIndex?: number;
    /**
     * 输入输出数据采用的坐标系
     * @default EPSG:4326
     */
    projection?: string;
    /**
     * 选中点位id更新时触发
     */
    $emit(eventName: 'update:selectPointId', id: string): this;
    /**
     * 图层是否在初始化时自适应屏幕后触发
     * @param e 当前视图中心坐标与缩放层级
     */
    $emit(eventName: 'fit', e: FitDataInterface): this;
    /**
     * 鼠标悬浮在矢量图层时触发
     */
    $emit(eventName: 'pointermove', moveFeature: ClusterEventInterface): this;
    /**
     * 鼠标点击矢量图层时触发
     */
    $emit(eventName: 'singleclick', selectFeature: ClusterEventInterface): this;

    /**
     * 作用域插槽
     */
    $scopedSlots: {
        'default': (props:{moveFeature: ClusterEventInterface|null, selectFeature: ClusterEventInterface|null}) => VNode[]
    }
}
