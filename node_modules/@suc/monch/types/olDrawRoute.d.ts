import Vue, { VNode } from 'vue';
import {Style, StyleLike} from './style';
import { ModifyEvent } from 'ol/interaction/Modify';

export interface RouteItem {
    fId: string|number,
    coords: number[],
    style?: StyleLike
}

// 被点击的节点信息
export interface SelectedPoint {
    coords: number[],  // 点位坐标
    id: string|number  // 点位id
}

export interface RouteItem {
    coords: number[], // 路线坐标串
    fId: string|number
}

export declare class OlDrawRoute extends Vue {
    /**
     * 是否开启编辑
     * @default true
     */
    isModify?: boolean;
    /**
     * 路径节点样式
     * @default {
                        image: {
                            circle: {
                                radius: 6,
                                fill: {
                                    color: "#0099ff"
                                },
                                stroke: {
                                    color: "#fff",
                                    width: 1
                                }
                            }
                        }
                    }
     */
    icon?: Style;
    /**
     * 路径线样式
     * @default {
                        stroke: {
                            color: '#2058A5',
                            width: 2
                        }
                    }
     */
    lineStyle?: Style;
    /**
     * 编辑点的颜色
     * @default #1d94f7
     */
    modifyColor?: string|number[];
    /**
     * 每次绘制前是否清除前面绘制的图形；默认不清除
     * @default true
     */
    isSingle?: boolean;
    /**
     * 新增绘制交互触发器，同时用作构成新绘制路径上路线与节点的id
     */
    newId?: string | number;
    /**
     * 预加载的路径
     * @default []
     */
    hasFeatures?: RouteItem[];
    /**
     * 图层层级
     * @default 0
     */
    zIndex?: number;
    /**
     * 输入输出数据采用的坐标系
     * @default EPSG:4326
     */
    projection?: string;

    /**
     * 绘制结束时触发
     */
    $emit(eventName: 'drawend', e: [RouteItem]): this;
    /**
     * 编辑开始时触发
     */
    $emit(eventName: 'modifystart', e: ModifyEvent): this;
    /**
     * 编辑结束时触发
     * @param 组件内所有图形的数据
     */
    $emit(eventName: 'modifyend', e: RouteItem[]): this;

    /**
     * 作用域插槽
     */
    $scopedSlots: {
        'default': (props: { selectPoint:  SelectedPoint|null }) => VNode[]
    };
}
