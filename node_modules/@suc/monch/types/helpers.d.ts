import type { ProjectionLike } from 'ol/proj';
import type { Extent } from 'ol/extent';
import type { Coordinate } from 'ol/coordinate';
import type Map from 'ol/Map';
import type { StyleLike } from 'ol/style/Style';
import { StyleLike as InputStyleLike } from './style';

export function exportMap(canvas: HTMLCanvasElement): void;

export function validCoords(longitude: number, latitude: number): boolean;  //判断经纬度是否有效
export function colorRgb(color: string): string;  //16进制颜色转为R,G,B
/**
 * 把坐标从当前坐标系转换到目标坐标系
 * @param coordinate 要转换的坐标
 * @param sourceProjection 原坐标系
 * @param destinationProjection 目标坐标系
 * @return Coordinate
 */
export function coordinateTransform(coordinate: Coordinate, sourceProjection: ProjectionLike, destinationProjection: ProjectionLike): Coordinate;

/**
 * 把范围从当前坐标系转换到目标坐标系
 * @param extent 要转换的范围
 * @param sourceProjection 原坐标系
 * @param destinationProjection 目标坐标系
 * @return Extent
 */
export function extentTransform(extent: Extent, sourceProjection: ProjectionLike, destinationProjection: ProjectionLike): Extent;

/**
 * 判断坐标点是否在可视视图内
 * @param map Map
 * @param coordinate 要判断的坐标
 * @param projection 要判断的坐标的坐标系
 * @return boolean
 */
export function isInView(map: Map, coordinate: Coordinate, projection: ProjectionLike): boolean;

/**
 * 自定义坐标系，可在http://epsg.io/网站，查找坐标系proj4定义
 * @param name 坐标系名称
 * @param code proj4定义或者WKT定义
 * @return void
 */
export function defineProj(name: string, code: string): void;

/**
 * 已知一个经纬度点位和像素距离数组，求另一个点位
 * @param mapId 地图id
 * @param LonLat 已知点位的经纬度
 * @param pixel 两点之间的像素距离 [x,y]
 * @return Promise<Coordinate>
 */
export function getLonLatFromPixelDis(mapId: string, LonLat: Coordinate, pixel: number[]): Promise<Coordinate>;

/**
 *  @description: 通过中心点经纬度和距离，更加精确地求当前地图坐标系下的单位长度
 *  @param LonLat 经纬度
 *  @param distance 距离（米）
 *  @param viewProjection 当前地图坐标系
 *  @return radius 当前地图坐标系下的单位长度
 */
export function calcRadiusAccurate(LonLat: Coordinate, distance: number, viewProjection: ProjectionLike): number;

/**
 * 两个坐标之间的距离（m）
 * @param projection 两个坐标点采用的坐标系
 * @param point1 点坐标
 * @param point2 点坐标
 * @return number
 */
export function getGeodesicDistance(projection: ProjectionLike, point1: Coordinate, point2: Coordinate): number;

/**
 * 把组件的 style 数据转换成 ol 核心类 Style
 * @param inputStyle
 * @return
 */
export function transformStyle(inputStyle?: InputStyleLike): StyleLike | undefined;

/**
 *  @description: 使用场景：点击点位，地图上点位弹框完全呈现，并出现在在视图中心位置
 *  @param mapId 地图id
 *  @param pos 点位经纬度坐标
 *  @param yPixel 弹框呈现在中心位置后，点位距离地图上边框的纵向距离（建议弹框高度+点位图标高度+20）
 *  @return
 */
export function toViewCenter(mapId: string, pos: Coordinate, yPixel: number): Promise<void>;

/**
 *  @description: 获取扇形弧线上的坐标点
 *  @param {Number} startAngle  开始弧度
 *  @param {Number} endAngle    结束弧度
 *  @return {Array}
 */
export function getArcPoints(center:number[], radius:number, startAngle:number, endAngle:number): number[][];
