import Vue from 'vue';
import { StyleLike } from './style';
import { GeomType } from './olPath';
import Feature from 'ol/Feature';
import {DrawEvent} from 'ol/interaction/Draw'
import {ModifyEvent} from 'ol/interaction/Modify'

export interface PathOptions {
    id: string,
    type: GeomType,
    coords: number[],
    radius?: number,
    style?: StyleLike
}

export interface ShapeItem {
    coords: number[],
    center: number[],
    fId: string|number,
    feature: Feature
}

export type LoadEvent = ShapeItem[];

export interface DrawEndEvent {
    data: ShapeItem[],
    event: DrawEvent
}

export interface ModifyEndEvent {
    data: ShapeItem[],
    event: ModifyEvent
}

export declare class OlDrawShape extends Vue {
    /**
     * 图形类型
     * @default Point
     */
    type?: 'Point' | 'LineString' | 'Polygon' | 'Box' | 'Square' | 'Circle' | 'Star';
    /**
     * 预加载的图形
     * @default []
     */
    hasFeatures?: PathOptions[];
    /**
     * 是否开启编辑
     * @default true
     */
    isModify?: boolean;
    /**
     * 要绘制的图形的样式
     */
    olStyle?: StyleLike;
    /**
     * 触发图形绘制交互，并用作新增feature的id
     */
    newId?: string | number;
    /**
     * 每次绘制前是否清除前面绘制的图形；默认不清除
     * @default false
     */
    isSingle?: boolean;
    /**
     * 图层层级
     * @default 0
     */
    zIndex?: number;
    /**
     * 输入输出数据采用的坐标系
     * @default EPSG:4326
     */
    projection?: string;

    /**
     * 加载预设图形成功后触发
     */
    $emit(eventName: 'loadend', e: LoadEvent): this;
    /**
     * 绘制结束时触发
     */
    $emit(eventName: 'drawend', e: DrawEndEvent): this;
    /**
     * 编辑开始时触发
     */
    $emit(eventName: 'modifystart', e: ModifyEvent): this;
    /**
     * 编辑结束时触发
     * @param 组件内所有图形的数据
     */
    $emit(eventName: 'modifyend', e: ModifyEndEvent): this;
}
